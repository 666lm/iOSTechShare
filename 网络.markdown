精通iOS网络指南
---

# 网络

网络协议通常分不同层次进行开发，除7层的OSI外，最常见的是TCP/IP协议簇。

## TCP/IP协议簇

TCP/IP协议簇分为四层，从下往上分：链路层、网络层、运输层和应用层。

## iOS网络框架

iOS网络层次结构可以分为四层，前三层是可编程的层次：

1. Cocoa层: NSURL, Bonjour(NSNetService), Game Kit, Web Kit;
2. Core Foundation层: 基于 C 的 CFNetwork 和 CFNetServices;
3. OS层: 基于 C 的 BSD socket;
4. Hardware: WiFi, Cellular, Bluetooth。

其中CF和OS层还有Core Bluetooth。 

### NSURL

最常用就不介绍了。

### Game Kit

构建在Bonjour之上，提供了点到点选项。其并不需要网络基础设施就能使用。能创建自组(ad-hoc)的Bluetooth Personal Area Networks(PAN)，这样在极少或是没有基础设施的能力，就是非常棒的网络候选者了。

### Bonjour

是Apple对零配置(zeroconf)网络的实现。提供了一种机制，可以检测并与网络中的设备或服务进行连接，同时无须了解设备的网络地址。通过名字、服务类型与域这个元组来引用服务。他对多播DNS(mDNS)与基于DNS的服务探测(DNS-SD)所要求的底层网络进行了抽象。[更多1](http://southpeak.github.io/blog/2014/07/19/bonjourji-ben-li-lun/)，[更多2](http://www.cnblogs.com/kesalin/archive/2011/09/15/cocoa_bonjour.html)。

### NSStream

[更多](http://www.cnblogs.com/kesalin/archive/2013/04/29/ios_network_nsstream.html)

### CFNetwork

基于BSD Socket用在NSStream、URL Loading System、Bonjour与Game Kit API的实现中。为HTTP、FTP提供了原生的支持。跟BSD Socket之间的主要差别是在于runloop的集成。需要注意是否在主线程，辅助线程的话，则需要以恰当的模型开始runloop。

[更多](http://www.cnblogs.com/kesalin/archive/2013/04/14/ios_cfnetwork.html)

### Socket

BSD Socket构成了大多数Internet活动的基础。其并没有在OS中插入任何hook，无法穿过系统范围的VPN，如果WiFi或是蜂窝无线电关闭了，调用其API无法自动激活。

[更多](http://www.cnblogs.com/kesalin/archive/2013/04/13/cocoa_socket.html)

# URL Loading System

URL LoadingSystem 是 Foundation框架中，使用标准因特网协议来和URLs交互、和服务器通信的类 统称。允许你的app通过URL访问内容的 类和协议的组合。这个技术的核心是NSURL类，能让你控制URL和其所引用的资源。为了能支持这样的类，Foundation框架提供了一个丰富的类集合，让你能载入一个URL所引用的内容，上传数据到服务器，管理cookie存储，控制响应caching，以app的方式handle credential 存储和验证，书写自定义协议扩展。

支持的协议有：FTP, HTTP, HTTPS, FILE, DATA。它使用用户系统偏好设置，默认支持代理服务器和SOCKS网关。

注意，NSURLProtocol还有像网络优化、流量监控、缓存这样七七八八的应用。

# HTTP 及 应用

## 基础知识

### URL

通用格式: <scheme>://<user>:<password>@<host>:<port>/<path>;<params>?<query>#<frag>

如: http://www.jeo-hardware.com/hammers;sale=false/index.html;graphics=true?item=12731&color=blue&size=large#drills

### 报文

分为两类：请求报文(request message)和 响应报文(response message)。由三部分组成: 起始行(start line)、首部块(header)、数据的主体(body)。

### 方法

* GET : 
* HEAD :
* PUT : 创建或者更新 服务器文档，向服务器存储数据
* POST : 发送表单，向服务器发送数据
* TRACE :
* OPTIONS : 
* DELETE :
* 扩展方法 : MOVE, COPY

### 状态码

* 100 ~ 199 : 信息性
* 200 ~ 299 : 成功
* 300 ~ 399 : 重定向
* 400 ~ 499 : 客户端错误
* 500 ~ 599 : 服务器错误

### 首部

* 通用首部
* 请求首部
* 响应首部
* 实体首部
* 扩展首部

### 连接管理

### HTTP拓扑结构

HTTP服务器、代理(出口代理、访问\入口代理、反向代理、网络交换代理)、缓存、网关和机器人应用程序。

### 用户识别机制

* 承载用户身份信息的HTTP首部；
* 客户端IP地址跟踪，通过用户的IP地址对其进行识别；
* 用户登录，用认证方式来识别用户；
* 胖URL，一种在URL中嵌入识别信息的技术；
* cookie，一种功能强大且高效的持久身份识别技术。

### Cookie

分为会话Cookie和持久Cookie。需要注意的是cookie与缓存的关系。（可查看《HTTP权威指南》p290）

NSHTTPCookie 和 NSHTTPCookieStorage。

## HTTP缓存机制 以及各种缓存优化

还可以参考[RFC2616](http://www.ietf.org/rfc/rfc2616.txt) ， [HTTP协议 (四) 缓存](http://www.cnblogs.com/tankxiao/archive/2012/11/28/2793365.html)，[HTTP缓存机制](http://blog.afantree.com/network/http-caching-mechanism.html)。

HTTP/1.1中缓存的目的是为了在很多情况下减少发送请求，也即直接返回缓存；同时在许多情况下可以不需要发送完整响应。前者减少了网络回路的数量，挺高响应速度，HTTP利用一个“过期（expiration）”机制来为此目的。后者减少了网络应用的带宽，HTTP用“验证（validation）”机制来为此目的。

使用缓存的优点：

* 缓存减少了冗余的数据传输，节省了你的网络费用;
* 缓存缓解了网络瓶颈的问题。不需要更多的带宽就能够更快地加载页面;
* 缓存降低了对原始服务器的要求。服务器可以更快地响应，避免过载的出现;
* 缓存降低了距离时延，因为从较远的地方加载页面会更慢一些。

缓存处理流程：

请求到达 -- > 是否有缓存 -- 有 > 是否新鲜 -- 否> 与服务器再验证 -- > 再验证过了 -- 是> 对已缓存文档的新鲜度进行更新 -- > 提供给客户端
												                               -- 否> 从服务器获取 -- > 存入缓存 -- > 提供给客户端
											 -- 是> 提供给客户端
						  -- 否 > 从服务器获取 -- > 存入缓存 -- > 提供给客户端						  

1. Cache-Control<no-store, no-cache, must-revalidate, max-age> 和 Expires<date> 控制是否新鲜；还有像附加Expires日期首部和不附加过期信息，让缓存来确定自己的过期时间。
2. If-Modified-Since<date> 和 If-None-Match<tags> 来再验证。

### iOS Cache策略

[一个iOS APP的缓存策略](http://www.haojianzong.com/coding/ios/ios-cache.html)

1. 自建缓存数据库并加上一些缓存策略，如自己手写保存、读取core data 或者 file里面；
2. 第三方库，如使用RestKit(https://github.com/RestKit/RestKit) 或者 AFIncrementalStore；
3. 使用iOS的HTTP Cache机制，如使用NSURLCache等。
4. 自制缓存协议，如使用NSURLProtocol

#### 自建缓存数据库

使用CoreData, 并使用 NSFetchedResultsController。或者使用内存做缓存等。

#### 第三方库

如RestKit，SDWebImage。

#### 使用iOS的HTTP Cache机制 

1. [NSURLCache](http://nshipster.cn/nsurlcache/)
2. [使用Etag增强iOS的URL缓存功能](http://www.cocoachina.com/industry/20140707/9049.html)

#### 自制缓存协议

教程：[[转]用NSURLPROTOCOL实现代理和缓存](http://www.csdn123.com/html/blogs/20130506/9622.htm)
有趣的东西:[使用NSURLProtocol实现UIWebView的离线缓存](http://www.dkankan.com/archives/3347)

## 网络错误

错误源：操作系统错误(没有网络等)、HTTP错误(401错误等)和应用错误(业务逻辑错误等)。
网络状况的判断和保持错误处理的一致性。

## 网络安全

Basic 验证 和 Digest验证。HTTPS。

## 网络优化

优化的问题有：带宽、延迟和电量。[iOS移动网络调优那些事](http://xiangwangfeng.com/2013/10/16/iOS%E7%A7%BB%E5%8A%A8%E7%BD%91%E7%BB%9C%E8%B0%83%E4%BC%98%E9%82%A3%E4%BA%9B%E4%BA%8B/)

1. 压缩减少请求带宽；
2. 通过管道降低请求延迟；
3. 使用缓存最小化请求带宽。
4. 尽量使用IP，避免DNS；
5. 减少不必要的连接请求；
6. CDN;
7. 合理超时；
8. 合理加密；
9. 使用断点上传和分段上传；
10. 平衡延迟、带宽;
11. TCP协议栈的优化。

# 底层网络

BSD Socket, CFNetwork, NSStream

# 应用间网络通信

应用间通信(包括 URL通信、带参数的URL以及带序列化后参数的URL等，SSO)，Game Kit, Bonjour。

# 更多 
<http://www.infoq.com/cn/articles/how-ctrip-improves-app-networking-performance>